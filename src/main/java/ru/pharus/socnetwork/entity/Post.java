package ru.pharus.socnetwork.entity;

import lombok.*;
import org.hibernate.validator.constraints.Length;
import org.hibernate.validator.constraints.NotBlank;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.util.Objects;

/**
 * Class Car java Bean entity - used for custom cars
 *
 * Equals and Hashcode methods made by hand
 *
 * Lombok knowledge, for example:
 * Only Constructors, Getters and Setters are generated by Lombok annotations
 */

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class Post implements Comparable<Post> {
//    id INT AUTO_INCREMENT PRIMARY KEY,
    private int id;
//    driver_id INT
    @NotNull
    private int userId;
//    title VARCHAR(255) NOT NULL,
    @Size(max = 255)
    private String title;
//    post TEXT,
    @NotBlank(message = "Please enter text")
    @Length(min=5, max=2000)
    private String text;

    @Override
    public boolean equals(Object o) {
        if (this == o) return true; // рефлексивность объект равен самому себе
        if (o.getClass() != this.getClass()) return false;

        Post post = (Post) o;
        return  (id == post.id &&
                userId == post.userId &&
                (null == title ? title == post.title : title.equals(post.title))  &&
                (null == text ? text == post.text : text.equals(post.text)));
    }

    @Override
    public int hashCode() {
        return Objects.hash(id,userId, title, text);
    }

    @Override
    public int compareTo(Post o) {
        // Пока решил использовать в качестве естественного порядка сортировки только id
        return (id < o.id) ? -1 : (id > o.id) ? 1 : 0;
    }
}
