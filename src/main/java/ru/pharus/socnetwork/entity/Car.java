package ru.pharus.socnetwork.entity;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.validator.constraints.Length;

import javax.validation.constraints.NotNull;
import java.util.Objects;

/**
 * Class Car java Bean entity - used for custom cars
 *
 * Equals and Hashcode methods made by hand
 *
 * Lombok knowledge, for example:
 * Only Constructors, Getters and Setters are generated by Lombok annotations
 */

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class Car implements Comparable<Car> {
//    id INT AUTO_INCREMENT PRIMARY KEY,
    private int id;
//    driver_id INT,
    @NotNull
    private int userId;
//    model_id INT NOT NULL,
    @NotNull
    private int modelId;
//    car_year YEAR,

    //@Size(max = 4)  @Length(max = 4) выдают ошибку для поля: непонятно
    //No validator could be found for constraint 'org.hibernate.validator.constraints.Length' validating type 'java.lang.Integer'. Check configuration for 'year'
    private int year;

//    car_number VARCHAR(10),
    @Length(min=5, max=10)
    private String carNumber;

    @Override
    public boolean equals(Object o) {
        if (this == o) return true; // рефлексивность - объект равен самому себе
        if (o == null || o.getClass() != this.getClass()) return false; // не нулевая ссылка - при сравнении с литералом null всегда возвращает значение false.

        Car car = (Car) o;
        return  (id == car.id &&
                userId == car.userId &&
                modelId == car.modelId &&
                year != car.year &&
                (carNumber == null ? carNumber == car.carNumber : carNumber.equals(car.carNumber)));
    }

    @Override
    public int hashCode() {
        //int result = 46 * id;
        //result += 46 * userId;
        //result += 46 * modelId;
        //result += 46 * year;
        //result += 46 * carNumber.hashCode();
        //return result;
        // I decided use standard java 7 util for generate hashcode
        return Objects.hash(id,userId,modelId,year,carNumber);
    }

    @Override
    public int compareTo(Car o) {
        // Пока решил использовать в качестве естественного порядка сортировки только id
        return (id < o.id) ? -1 : (id > o.id) ? 1 : 0;
    }
}
